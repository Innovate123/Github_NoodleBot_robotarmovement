def PythonSubprogram1():
  set_gravity([0.0, 0.0, 9.82])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 0)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tcp(p[0.035,-0.035,0.18,0.0,0.0,0.0])
  set_payload(0.0)
  set_tool_voltage(24)
  step_count_b254b4b4_ff98_40d3_a7a7_048c2be83f46 = 0
  thread Step_Counter_Thread_6c7f8f64_f6d1_4249_bb5a_45384284135a():
    while (True):
      step_count_b254b4b4_ff98_40d3_a7a7_048c2be83f46 = step_count_b254b4b4_ff98_40d3_a7a7_048c2be83f46 + 1
      sync()
    end
  end
  run Step_Counter_Thread_6c7f8f64_f6d1_4249_bb5a_45384284135a()
  set_safety_mode_transition_hardness(0)
  rtde_set_watchdog("speed_slider_mask", 10.0, "ignore")
  # begin: URCap Installation Node
  #   Source: RG - On Robot, 1.10.1, OnRobot A/S
  #   Type: RG Configuration
  global measure_width=0
  global grip_detected=False
  global lost_grip=False
  global zsysx=0
  global zsysy=0
  global zsysz=0.06935
  global zsysm=0.7415
  global zmasx=0
  global zmasy=-0
  global zmasz=0.18659
  global zslax=0
  global zslay=0
  global zslaz=0
  global zmasm=0
  global zslam=0
  global zslatcp=p[0,0,0,0,0,0]
  global zmastcp=p[0,0,0.18659,0,-0,-3.14159]
  thread lost_grip_thread():
  while True:
  set_tool_voltage(24)
  	if True ==get_digital_in(9):
  		sleep(0.024)
  		if True == grip_detected:
  			if False == get_digital_in(8):
  				grip_detected=False
  				lost_grip=True
  			end
  		end
  	set_tool_analog_input_domain(0, 1)
  	set_tool_analog_input_domain(1, 1)
  	zscale = (get_analog_in(2)-0.026)/2.9760034
  	zangle = zscale*1.57079633+-0.08726646
  	zwidth = 5.0+110*sin(zangle)
  	global measure_width = (floor(zwidth*10))/10-9.2
  	end
  	sync()
  end
  end
  lg_thr = run lost_grip_thread()
  def RG2(target_width=110, target_force=40, payload=0.0, set_payload=False, depth_compensation=False, slave=False):
  	set_tcp(p[0,0,0.18659,0,-0,-3.14159])
  	grip_detected=False
  	if slave:
  		slave_grip_detected=False
  	else:
  		master_grip_detected=False
  	end
  	timeout = 0
  	timeout_limit = 750000
  	while get_digital_in(9) == False:
  	  if timeout > timeout_limit:
  	    break
  	  end
  	  timeout = timeout+1
  	  sync()
  	end
  	def bit(input):
  	  msb=65536
  	  local i=0
  	  local output=0
  	  while i<17:
  	    set_digital_out(8,True)
  	    if input>=msb:
  	      input=input-msb
  	      set_digital_out(9,False)
  	    else:
  	      set_digital_out(9,True)
  	    end
  	    if get_digital_in(8):
  	      out=1
  	    end
  	    sync()
  	    set_digital_out(8,False)
  	    sync()
  	    input=input*2
  	    output=output*2
  	    i=i+1
  	  end
  	  return output
  	end
  	target_width=target_width+9.2
  	if target_force>40:
  	target_force=40
  	end
  	if target_force<3:
  	target_force=3
  	end
  	if target_width>110:
  	target_width=110
  	end
  	if target_width<0:
  	target_width=0
  	end
  	rg_data=floor(target_width)*4
  	rg_data=rg_data+floor(target_force/2)*4*111
  	rg_data=rg_data+32768
  	if slave:
  	rg_data=rg_data+16384
  	end
  	bit(rg_data)
  	if slave==False:
  	t_w_rg=pose_trans(get_actual_tool_flange_pose(), zmastcp)
  	end
  	if slave:
  	t_w_rg=pose_trans(get_actual_tool_flange_pose(), zslatcp)
  	end
  	t_rg_w=pose_inv(t_w_rg)
  	if depth_compensation:
  	finger_length = 55.0/1000
  	finger_heigth_disp = 5.0/1000
  	center_displacement = 7.5/1000
  
  	start_pose = get_forward_kin()
  	set_analog_inputrange(2, 1)
  	zscale = (get_analog_in(2)-0.026)/2.9760034
  	zangle = zscale*1.57079633+-0.08726646
  	zwidth = 5.0+110*sin(zangle)
  
  	start_depth = cos(zangle)*finger_length
  
  	sleep(0.016)
  	timeout = 0
  	while get_digital_in(9) == True:
  	  timeout=timeout+1
  	  sleep(0.008)
  	  if timeout > 20:
  	    break
  	  end
  	end
  	timeout = 0
  	timeout_limit = 750000
  	compensation_depth = 0
  	while get_digital_in(9) == False:
  	  zscale = (get_analog_in(2)-0.026)/2.9760034
  	  zangle = zscale*1.57079633+-0.08726646
  	  zwidth = 5.0+110*sin(zangle)
  	  measure_depth = cos(zangle)*finger_length
  	  compensation_depth = (measure_depth - start_depth)
  	  target_pose =pose_add(start_pose,pose_trans(pose_trans(t_w_rg, p[0,0,-compensation_depth,0,0,0]),t_rg_w))
  
  	  if timeout > timeout_limit:
  	    break
  	  end
  	  timeout=timeout+1
  	#  servoj(get_inverse_kin(target_pose), t=0.008, lookahead_time=0.033, gain=1500)
  	#  textmsg(point_dist(target_pose, get_forward_kin()))
  	#end
  	#textmsg("end gripper move!!!!!")
  	#nspeedthr = 0.001
  	#nspeed = norm(get_actual_tcp_speed())
  	#while nspeed > nspeedthr:
  	#  servoj(get_inverse_kin(target_pose), t=0.008, lookahead_time=0.033, gain=1500)
  	#  nspeed = norm(get_actual_tcp_speed())
  	#  textmsg(point_dist(target_pose, get_forward_kin()))
  	#end
  	servoj(get_inverse_kin(target_pose),0,0,0.008,0.01,2000)
  	if point_dist(target_pose, get_forward_kin()) > 0.005:
  	popup("Lower grasping force or max width",title="RG-lag threshold exceeded", warning=False, error=False, blocking=False)
  	end
  	end
  	act_comp_pose = p[0,0,0,0,0,0]
  	while norm(act_comp_pose) < norm(compensation_depth)-0.0002:
  	servoj(get_inverse_kin(target_pose),0,0,0.008,0.01,2000)
  	act_comp_pose = pose_trans(pose_inv(start_pose),get_forward_kin())
  	end
  	stopj(2)
  	end
  	if depth_compensation==False:
  	timeout = 0
  	timeout_count=20*0.008/0.008
  	while get_digital_in(9) == True:
  	  timeout = timeout+1
  	  sync()
  	  if timeout > timeout_count:
  	    break
  	  end
  	end
  	timeout = 0
  	timeout_limit = 750000
  	while get_digital_in(9) == False:
  	  timeout = timeout+1
  	  sync()
  	  if timeout > timeout_limit:
  	    break
  	  end
  	end
  	end
  	sleep(0.024)
  	if set_payload:
  	if slave:
  	if get_analog_in(3)/0.5952007 < 1.42:
  	zslam=0
  	else:
  	zslam=payload
  	end
  	else:
  	if get_digital_in(8) == False:
  	zmasm=0
  	else:
  	zmasm=payload
  	end
  	end
  	zload=zmasm+zslam+zsysm
  	set_payload(zload,[(zsysx*zsysm+zmasx*zmasm+zslax*zslam)/zload,(zsysy*zsysm+zmasy*zmasm+zslay*zslam)/zload,(zsysz*zsysm+zmasz*zmasm+zslaz*zslam)/zload])
  	end
  	master_grip_detected=False
  	master_lost_grip=False
  	slave_grip_detected=False
  	slave_lost_grip=False
  	if True == get_digital_in(8):
  		master_grip_detected=True
  	end
  	if get_analog_in(3)/0.5952007>1.97:
  		slave_grip_detected=True
  	end
  	grip_detected=False
  	lost_grip=False
  	if True == get_digital_in(8):
  		grip_detected=True
  	end
  	zscale = (get_analog_in(2)-0.026)/2.9760034
  	zangle = zscale*1.57079633+-0.08726646
  	zwidth = 5.0+110*sin(zangle)
  	global measure_width = (floor(zwidth*10))/10-9.2
  	if slave:
  	slave_measure_width=measure_width
  	else:
  	master_measure_width=measure_width
  	end
  	return grip_detected
  end
  set_tool_voltage(24)
  set_tcp(p[0,0,0.18659,0,-0,-3.14159])
  # end: URCap Installation Node
  # Test ur5c
  def Test_ur5c():
    $ 37 "Test ur5c" "noBreak"
    $ 38 "MoveL"
    $ 39 "Waypoint_6" "breakAfter"
    movel(p[-.113257651489, -.352945961331, .056386894061, 2.474349724027, -1.083316668695, -.456972658778], a=1.2, v=1.0)
    $ 40 "MoveJ"
    $ 41 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(p[-.113257832630, -.352951239163, .074318792080, 2.474307330724, -1.083394099642, -.456927817725], qnear=[1.2067017988903737, -1.9104310568315332, 2.5068575097488583, 3.7112476712226954, 4.368419757006608, 0.3867098074394684]), a=1.3962634015954636, v=1.0471975511965976)
    $ 42 "MoveJ"
    $ 43 "Waypoint_8" "breakAfter"
    movej(get_inverse_kin(p[.290242590647, -.352981885513, .074321283268, 2.474302408283, -1.083372757132, -.456888645755], qnear=[2.3012012311718326, -1.4446188820335228, 1.9505853523229781, 4.352414458615837, 4.204196129823881, 1.5932046683061758]), a=1.3962634015954636, v=1.0471975511965976)
    $ 44 "MoveJ"
    $ 45 "Waypoint_9" "breakAfter"
    movej(get_inverse_kin(p[.290238596194, -.353007385256, .056761346686, 2.474183450778, -1.083337744102, -.456750300134], qnear=[2.301266653153243, -1.4219902644191693, 1.9761234443201225, 4.304136901247556, 4.2042568076325315, 1.592975996530038]), a=1.3962634015954636, v=1.0471975511965976)
    # begin: URCap Program Node
    #   Source: RG - On Robot, 1.10.1, OnRobot A/S
    #   Type: RG2
    $ 46 "RG2(85)"
    RG2(85,40,0.0,True,False,False)
    # end: URCap Program Node
    $ 47 "MoveJ"
    $ 48 "Waypoint_10" "breakAfter"
    movej(get_inverse_kin(p[.092942844880, -.353109103771, .462614501173, 1.169196745482, -1.240773296384, 1.170938337046], qnear=[1.5453460207333403, -2.3914011162183337, 2.4199161533675664, 3.1169524184935007, 4.6834998142824595, 1.5707465418554356]), a=1.3962634015954636, v=1.0471975511965976)
  end
  # Test ur5b
  def Test_ur5b():
    $ 49 "Test ur5b" "noBreak"
    $ 50 "MoveL"
    # begin: URCap Program Node
    #   Source: RG - On Robot, 1.10.1, OnRobot A/S
    #   Type: RG2
    $ 51 "RG2(85)"
    RG2(85,40,0.0,True,False,False)
    # end: URCap Program Node
    $ 52 "Waypoint_1" "breakAfter"
    movel(p[.092938561274, -.353096816926, .462595264904, 1.169187776176, -1.240793336641, 1.170914400796], a=1.2, v=1.0)
    $ 53 "Wait: 0.1"
    sleep(0.1)
    $ 54 "Waypoint_2" "breakAfter"
    movel(p[.281568217520, -.356493013793, .057061723406, 2.450866173885, -1.081220952716, -.397286041086], a=1.2, v=1.0)
    # begin: URCap Program Node
    #   Source: RG - On Robot, 1.10.1, OnRobot A/S
    #   Type: RG2
    $ 55 "RG2(0)"
    RG2(0,40,0.0,True,False,False)
    # end: URCap Program Node
    $ 56 "Wait: 0.1"
    sleep(0.1)
    $ 57 "Waypoint_3" "breakAfter"
    movel(p[.275230298703, -.365243581076, .083857619998, 2.408240585724, -1.062846013313, -.407384482214], a=1.2, v=1.0)
    $ 58 "Wait: 0.1"
    sleep(0.1)
    $ 59 "Waypoint_4" "breakAfter"
    movel(p[-.110350396857, -.365263356202, .083888695031, 2.408261056423, -1.062717481186, -.407365573496], a=1.2, v=1.0)
    $ 60 "Wait: 0.1"
    sleep(0.1)
    $ 61 "Waypoint_5" "breakAfter"
    movel(p[-.113250855454, -.352969852840, .056401326375, 2.474276899734, -1.083328779750, -.456908114775], a=1.2, v=1.0)
  end
  $ 1 "BeforeStart"
  $ 2 "var_1≔socket_open('192.168.0.100',30000)"
  global var_1=socket_open("192.168.0.100",30000)
  while (True):
    $ 3 "Robot Program"
    $ 4 "Loop var_1≟ False "
    while (var_1 ==   False  ):
      $ 5 "var_1≔socket_open('192.168.0.100',30000)"
      global var_1=socket_open("192.168.0.100",30000)
      $ 6 "Wait: 0.5"
      sleep(0.5)
    end
    $ 7 "socket_send_string('asking_for_data')"
    socket_send_string("asking_for_data")
    $ 8 "Wait: 0.5"
    sleep(0.5)
    $ 9 "var_2≔socket_read_ascii_float(3)"
    global var_2=socket_read_ascii_float(3)
    $ 10 "Wait: 0.5"
    sleep(0.5)
    $ 11 "var_1≔ False "
    global var_1=  False  
    $ 12 "If var_2[1]≟1"
    if (var_2[1] == 1):
      $ 13 "Call Test ur5b"
      Test_ur5b()
    end
    $ 14 "If var_2[2]≟1"
    if (var_2[2] == 1):
      $ 15 "Set do_4=On"
      set_standard_digital_out(4, True)
      $ 16 "Wait: 3.0"
      sleep(3.0)
      $ 17 "Set do_4=Off"
      set_standard_digital_out(4, False)
      $ 18 "Wait: 0.5"
      sleep(0.5)
      $ 19 "Set do_5=On"
      set_standard_digital_out(5, True)
      $ 20 "Wait: 3.0"
      sleep(3.0)
      $ 21 "Set do_5=Off"
      set_standard_digital_out(5, False)
      $ 22 "Wait: 0.5"
      sleep(0.5)
    end
    $ 23 "If var_2[3]≟1"
    if (var_2[3] == 1):
      $ 24 "Set do_6=On"
      set_standard_digital_out(6, True)
      $ 25 "Wait: 0.5"
      sleep(0.5)
      $ 26 "Set do_6=Off"
      set_standard_digital_out(6, False)
      $ 27 "Wait: 0.5"
      sleep(0.5)
      $ 28 "Set do_7=On"
      set_standard_digital_out(7, True)
      $ 29 "Wait: 0.5"
      sleep(0.5)
      $ 30 "Set do_7=Off"
      set_standard_digital_out(7, False)
      $ 31 "Wait: 0.5"
      sleep(0.5)
    end
    $ 32 "If digital_in[0]≟ False "
    if (get_standard_digital_in(0) ==   False  ):
      $ 33 "Call Test ur5c"
      Test_ur5c()
      $ 34 "Wait: 0.5"
      sleep(0.5)
      $ 35 "var_1≔ False "
      global var_1=  False  
    end
    $ 36 "socket_close()"
    socket_close()
  end
end
